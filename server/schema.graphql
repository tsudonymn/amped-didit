# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type DidIt {
  createdAt: DateTime!
  doit: DoIt
  id: String!
  updatedAt: DateTime!
}

input DidItCreateInput {
  doit: DoItWhereUniqueInput
}

input DidItOrderByInput {
  createdAt: SortOrder
  doitId: SortOrder
  id: SortOrder
  updatedAt: SortOrder
}

input DidItUpdateInput {
  doit: DoItWhereUniqueInput
}

input DidItWhereInput {
  doit: DoItWhereUniqueInput
  id: StringFilter
}

input DidItWhereUniqueInput {
  id: String!
}

type DoIt {
  createdAt: DateTime!
  description: String
  didIts(orderBy: DidItOrderByInput, skip: Float, take: Float, where: DidItWhereInput): [DidIt!]!
  id: String!
  name: String
  updatedAt: DateTime!
}

input DoItCreateInput {
  description: String
  name: String
}

input DoItOrderByInput {
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input DoItUpdateInput {
  description: String
  name: String
}

input DoItWhereInput {
  description: StringNullableFilter
  id: StringFilter
  name: StringNullableFilter
}

input DoItWhereUniqueInput {
  id: String!
}

type MetaQueryPayload {
  count: String!
}

type Mutation {
  createDidIt(data: DidItCreateInput!): DidIt!
  createDoIt(data: DoItCreateInput!): DoIt!
  createUser(data: UserCreateInput!): User!
  deleteDidIt(where: DidItWhereUniqueInput!): DidIt!
  deleteDoIt(where: DoItWhereUniqueInput!): DoIt!
  deleteUser(where: UserWhereUniqueInput!): User!
  login(credentials: Credentials!): UserInfo!
  updateDidIt(data: DidItUpdateInput!, where: DidItWhereUniqueInput!): DidIt!
  updateDoIt(data: DoItUpdateInput!, where: DoItWhereUniqueInput!): DoIt!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
}

type Query {
  _didItsMeta(orderBy: DidItOrderByInput, skip: Float, take: Float, where: DidItWhereInput): MetaQueryPayload!
  _doItsMeta(orderBy: DoItOrderByInput, skip: Float, take: Float, where: DoItWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: UserOrderByInput, skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  didIt(where: DidItWhereUniqueInput!): DidIt
  didIts(orderBy: DidItOrderByInput, skip: Float, take: Float, where: DidItWhereInput): [DidIt!]!
  doIt(where: DoItWhereUniqueInput!): DoIt
  doIts(orderBy: DoItOrderByInput, skip: Float, take: Float, where: DoItWhereInput): [DoIt!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  users(orderBy: UserOrderByInput, skip: Float, take: Float, where: UserWhereInput): [User!]!
}

enum QueryMode {
  Default
  Insensitive
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: [String!]!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: [String!]!
  username: String!
}

type UserInfo {
  accessToken: String
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: [String!]
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}
