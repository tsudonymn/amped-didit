/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, DidIt, DoIt } from "@prisma/client";

export class DidItServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.DidItFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DidItFindManyArgs>
  ): Promise<number> {
    return this.prisma.didIt.count(args);
  }

  async findMany<T extends Prisma.DidItFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DidItFindManyArgs>
  ): Promise<DidIt[]> {
    return this.prisma.didIt.findMany(args);
  }
  async findOne<T extends Prisma.DidItFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DidItFindUniqueArgs>
  ): Promise<DidIt | null> {
    return this.prisma.didIt.findUnique(args);
  }
  async create<T extends Prisma.DidItCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DidItCreateArgs>
  ): Promise<DidIt> {
    return this.prisma.didIt.create<T>(args);
  }
  async update<T extends Prisma.DidItUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DidItUpdateArgs>
  ): Promise<DidIt> {
    return this.prisma.didIt.update<T>(args);
  }
  async delete<T extends Prisma.DidItDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DidItDeleteArgs>
  ): Promise<DidIt> {
    return this.prisma.didIt.delete(args);
  }

  async getDoit(parentId: string): Promise<DoIt | null> {
    return this.prisma.didIt
      .findUnique({
        where: { id: parentId },
      })
      .doit();
  }
}
