/*
//------------------------------------------------------------------------------ 
// This code was generated by Amplication. 
// 
// Changes to this file will be lost if the code is regenerated. 
//
// There are other ways to to customize your code, see this doc to learn more
// https://docs.amplication.com/docs/how-to/custom-code
//
//------------------------------------------------------------------------------
  */
import { PrismaService } from "nestjs-prisma";
import { Prisma, DoIt, DidIt } from "@prisma/client";

export class DoItServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.DoItFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DoItFindManyArgs>
  ): Promise<number> {
    return this.prisma.doIt.count(args);
  }

  async findMany<T extends Prisma.DoItFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DoItFindManyArgs>
  ): Promise<DoIt[]> {
    return this.prisma.doIt.findMany(args);
  }
  async findOne<T extends Prisma.DoItFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DoItFindUniqueArgs>
  ): Promise<DoIt | null> {
    return this.prisma.doIt.findUnique(args);
  }
  async create<T extends Prisma.DoItCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DoItCreateArgs>
  ): Promise<DoIt> {
    return this.prisma.doIt.create<T>(args);
  }
  async update<T extends Prisma.DoItUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DoItUpdateArgs>
  ): Promise<DoIt> {
    return this.prisma.doIt.update<T>(args);
  }
  async delete<T extends Prisma.DoItDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DoItDeleteArgs>
  ): Promise<DoIt> {
    return this.prisma.doIt.delete(args);
  }

  async findDidIts(
    parentId: string,
    args: Prisma.DidItFindManyArgs
  ): Promise<DidIt[]> {
    return this.prisma.doIt
      .findUnique({
        where: { id: parentId },
      })
      .didIts(args);
  }
}
